
=======================
Основная информация
=======================

***********************
Методы шифрования в SSH
***********************

Протокол поддерживает три технологии защиты:

* Симметричное шифрование — для быстрой передачи данных.
* Асимметричное шифрование — для обмена ключами.
* Хеширование — для проверки целостности данных.

При подключении через SSH проверка подлинности выполняется с помощью закрытого ключа, хранящегося на локальном компьютере.

Windows: можно использовать клиент PuTTY.

Linux/macOS: подключение выполняется напрямую через терминал командой ``ssh``.

Протокол SSH предназначен для:

* Передачи данных (почта, видео, изображения и другие файлы) через защищенное соединение.
* Удаленного запуска программ и выполнения команд на сервере через командную строку.
* Сжатия файлов для удобной передачи данных.
* Переадресации портов и передачи шифрованного трафика между портами разных машин.

**Преимущества**

* Безопасная работа на удаленном сервере с использованием командной оболочки.
* Использование разных алгоритмов шифрования (симметричного, асимметричного и хеширования).
* Возможность безопасного использования любого сетевого протокола, что позволяет передавать по защищенному каналу файлы любого размера.

Главным преимуществом SSH является использование шифрования для защиты передачи данных между хостом и клиентом.

**Недостатки**

Протокол SSH не имеет средств защиты от действий злоумышленника, получившего root-доступ.
Одной из мер предосторожности является ограничение использования режима root без острой необходимости

*********************
Зачем нужны SSH-ключи
*********************

SSH-ключи — это способ безопасной аутентификации при подключении к серверу, сервисам (например, GitHub или GitLab), а также при автоматизации процессов (CI/CD, скрипты, деплой).
Вместо ввода пароля при каждом подключении используется пара криптографических ключей:

*Закрытый ключ (private key)* — хранится только у тебя на компьютере, его никому нельзя передавать.

*Открытый ключ (public key)* — загружается на сервер или в сервис (например, в GitHub).

Когда ты подключаешься, сервер сверяет ключи и пускает тебя, если они совпадают.

1. Безопасность
 Ключи надежнее: они длинные, генерируются алгоритмами и практически не поддаются взлому перебором, обычные же пароли можно подобрать перебором или украсть через фишинг. Даже если злоумышленник узнает логин, без закрытого ключа он не получит доступ.

2. Удобство
 Не нужно вводить пароль при каждом подключении, а также можно настроить доступ к десяткам серверов или репозиториев без ручного ввода паролей – поддержка “агентов ключей" позволяет держать ключ загруженным в памяти системы.

3. Доступ к GitHub и GitLab
 Для работы с репозиториями (git clone, git push, git pull) можно настроить SSH – это упрощает работу в команде и избавляет от необходимости каждый раз вводить логин и пароль.

4. Автоматизация и скрипты
 В системах CI/CD (например, GitHub Actions, GitLab CI, Jenkins) SSH-ключи позволяют безопасно подключаться к серверам и выполнять деплой. И можно организовать обмен файлами между машинами по scp или rsync без ввода пароля.

5. Гибкость и контроль
 Можно создавать отдельные ключи для разных машин и сервисов. В случае компрометации одного ключа достаточно его отозвать, не меняя доступы для остальных.
