
=============================================
Как создать свой SSH-ключ (на примере GitHab)
=============================================

***************************
1. Проверить наличие ключей
***************************

Открыть терминал (Linux/macOS) или Git Bash/WSL (Windows). Ввести команду::

    ls -la ~/.ssh


О наличии ключа говорит id_ed25519 / id_rsa и *.pub.

.. image:: images/consol.png

Если ключ уже есть, можно использовать его (если он не привязан к другому аккаунту), или
сгенерировать новую пару с другим именем (для GitHub лучше сделать отдельный ключ).

******************
2. Генерация ключа
******************

Ed25519 — современный, быстрый и безопасный алгоритм. Если по какой-то причинам требуется совместимость со старыми системами, вместо него можно использовать rsa с 4096 бит.

**Ввести команду в консоль (Linux / macOS / Git Bash)**::

    ssh-keygen -t ed25519 -C "your_email@example.com"

-t ed25519 — тип ключа (алгоритм шифрования).

-C — комментарий (обычно email) для идентификации ключа.

По умолчанию ключи сохранятся в ~/.ssh/id_ed25519 (закрытый, НИКОГДА НИКОМУ НЕ ПЕРЕДАВАТЬ) и ~/.ssh/id_ed25519.pub (открытый, его будем копировать на сервер).

Cпециально для GitHub, чтобы не перезаписывать существующие ключи, можно назвать так::

    ssh-keygen -t ed25519 -C "your_email@example.com" -f ~/.ssh/id_ed25519_github


***********************************
3. Проверить права доступа на ключи
***********************************

SSH ожидает строгие права на директорию и закрытый ключ::

    chmod 700 ~/.ssh
    chmod 600 ~/.ssh/id_ed25519         # или id_ed25519_github если такое название
    chmod 644 ~/.ssh/id_ed25519.pub

Если ключ RSA — заменить имя файла соответственно.

****************************
4. Добавить ключ в ssh-agent
****************************

Это нужно для того, чтобы не вводить passphrase каждый раз при входе.

Запустить ssh-agent в текущем терминале::
    eval "$(ssh-agent -s)"

Добавить ключ в агент (если менялось название ключа использовать корректный вариант)::
    ssh-add ~/.ssh/id_ed25519

На macOS можно сохранить ключ в Keychain::

    ssh-add --apple-use-keychain ~/.ssh/id_ed25519

В Windows (Git Bash) команды такие же::

    eval "$(ssh-agent -s)" и ssh-add.

Для PuTTY/Windows использовать PuTTYgen для генерации и Pageant для загрузки приватного ключа .ppk.

*******************************************
5. Скопировать открытый ключ в буфер обмена
*******************************************

Linux/macOS::

    cat ~/.ssh/id_ed25519.pub

Windows::

    Get-Content $env:USERPROFILE\.ssh\id_ed25519.pub

Строка должна выглядеть примерно так: ``ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIF... user@example.com``

*************************
6. Добавить ключ в GitHub
*************************

1) Войти в аккаунт GitHub.
2) Нажать на иконку профиля → Settings.
3) В меню слева выбрать SSH and GPG keys.
4) Нажать New SSH key (или New SSH key / Add SSH key).
5) В поле Title ввести понятное имя (например, laptop-2025 или work-desktop).
6) В поле Key вставить содержимое из id_ed25519.pub.
7) Нажать Add SSH key. Если включена двухфакторная аутентификация, может потребоваться подтверждение действия.

**Проверка подключения к GitHub**

Ввести команду в консоль::

    ssh -T git@github.com

Возможные корректные ответы:

GitHub распознал ключ:

    Hi username! You've successfully authenticated, but GitHub does not provide shell access.

Если ключ не найден или не используется: подсказки об отказе в доступе:

    Permission denied (publickey).

Если сообщение:

    Are you sure you want to continue connecting (yes/no)?

Ввести y/yes (это первый раз для данного хоста).

**Убедиться, что Git использует SSH-адрес репозитория**

Проверить текущие remotes::

    git remote -v


Если URL вида https://github.com/username/repo.git, то Git использует HTTPS. Переключить на SSH::

    git remote set-url origin git@github.com:username/repo.git


**Вариант для Windows с PuTTY (если не используется OpenSSH)**

1. Открыть PuTTYgen → Generate → двигай мышью в окне для генерации энтропии.
2. Ввести комментарий (email) и passphrase.
3. Нажать Save private key (.ppk) и Save public key (или скопировать содержимое поля Public key for pasting into OpenSSH from PuTTYgen).
4. На GitHub вставить публичный ключ.
5. Для автоматической загрузки ключа в Windows использовать Pageant (часть PuTTY) — добавить .ppk.

****************************
Рекомендации по безопасности
****************************

* Нельзя выкладывать приватный ключ (~/.ssh/id_*) в интернет или в публичные репозитории.
* Нужно использовать passphrase для приватного ключа.
* Для разных устройств и сервисов лучше делать разные ключи, так как в случае взлома проще отозвать один ключ.
* Необходимо хранить резервную копию приватного ключа в защищенном месте (зашифрованный диск, менеджер паролей).